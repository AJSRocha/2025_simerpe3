---
title: "Polvices polvando polvivamente"
format:
   pdf:
       include-in-header:
           - text: |
                \usepackage{todonotes}
                \usepackage{graphicx}
                \usepackage{amsmath}
       documentclass: asaproc
       classoption: [11pt]
editor: source
cite-method: biblatex
bibliography: Polvices.bib
biblatexoptions: 
  - citestyle=authoryear
author:
  - name: "Alberto Rocha \\thanks{Instituto Português do Mar e da Atmosfera}"
    corresponding: true
  - name: "Ana Moreno \\thanks{Instituto Português do Mar e da Atmosfera}"
    corresponding: false
number-sections: true
editor_options: 
  chunk_output_type: console
---

```{r}
#| eval: false
#| echo: false
tinytex::parse_install("report.log")
tinytex::tlmgr_update()


# https://cameronpatrick.com/post/2023/07/quarto-thesis-formatting/
```

```{r setup}
#| include: false

library(CatDyn)
library(RTMB)
library(wesanderson)
library(tidyverse)
library(xtable)
library(tmbstan)
library(shinystan)

source('scripts/custom_catdyn_fit.R')
source('scripts/custom_catdyn_bsd.R')
source('scripts/funcoes_catdyn.R')

load("data/df_effort_m_mbw_otb.Rdata")
load('data/mbw_model.Rdata')

mod_aux = lm(df_effort$catch ~ df_effort$effort)

# Fix a couple of outliers
df_effort = 
  df_effort %>% 
  mutate(catch = case_when(year_sale == 2005 &
                             month_sale == '09' ~
                             effort * mod_aux$coefficients[2] +
                             mod_aux$coefficients[1],
                           T ~ catch),
         catch_otb = case_when(year_sale == 2005 &
                                 month_sale == '09' ~
                                 effort_otb * mod_aux$coefficients[2] +
                                 mod_aux$coefficients[1],
                               T ~ catch_otb)) %>% 
  mutate(catch_otb = case_when(catch_otb == 0 ~ mean(catch_otb), 
                               T ~ catch_otb),
         effort_otb = case_when(effort_otb  < 150 ~ mean(effort_otb),
                                T ~ effort_otb))

```





```{r}
par = list(
  # logRt_scaled = log(rep(50000,18)),
  logRt_scaled = log( c(57744,40315,3534,21558,2766,
                     9.735,55453,3438,16525,10746,
                     14552,2524,22789,12567,34463,
                     15000,15000,15000)),
  logalpha      = log(1.1),
  logbeta       = log(0.6),
  logK          = log(0.00003),
  logN0_scaled  = log(50000),
  logM          = log(0.05),
  logsdCt       = log(0.25 * sd(dat$Ct[dat$Ct > 0]))  # consistent with CatDyn
)

indice_manual =
  list(
    10,11,12,
    12,12,10,11,12,
    11,10,12,7,10,
    12,11,12,12,10)

for(i in 0:(length(indice_manual)-1)){
  indice_manual[[i+1]] = 12*i + indice_manual[[i+1]]
}
```

```{r}
exp_cat = 
catdynexp(cat_df, 18, c(par$logM, par$logN0_scaled, par$logRt_scaled, par$logK, par$logalpha, par$logbeta, par$logsdCt), 
          c(head(cat_df$Data[[1]]$time.step,1),
               unlist(indice_manual), #estimativa do timing da perturbacao
              tail(cat_df$Data[[1]]$time.step,1)),
          distr = 'normal')

exp_cat$Model$Results$Predicted.Catch.thou

ggplot() + 
  geom_line(aes(x = 1:216,
                y = exp_cat$Model$Results$Predicted.Catch.thou), col = 'red') + 
    geom_line(aes(x = 1:216,
                y = exp_cat$Model$Results$Observed.Catch.thou))
```


```{r}
cat_df = as.CatDynData(x=df_effort %>%
                         filter(as.numeric(
                           as.character(year_sale)) %in% c(2006:2023)),
                       step="month",
                       fleet.name="MIS+OTB-S",
                       coleff=6,
                       colcat=5,
                       colmbw=9,
                       unitseff="trips",
                       unitscat="kg",
                       unitsmbw="kg",
                       nmult="thou",
                       season.dates=c(as.Date("2006-01-01"),
                                      last_date_of_week(2023, 52)-1))

distribuicoes = c("gamma", "lognormal","normal","negbin","aplnormal", "apnormal")
optimizadores = c('CG', 'spg', 'BFGS', 'Nelder-Mead')

#first trial
a = Sys.time()
fit_null =
  trialer(cat_df,
           p = 18,
                M = exp(par$logM),
                N0.ini = exp(par$logN0_scaled),
                P = indice_manual,
                P.ini  = as.list(par$logRt_scaled),
                k.ini = exp(par$logK),
                alpha.ini = exp(par$logalpha),
                beta.ini  = exp(par$logbeta),
                distr = distribuicoes[3],
                method = optimizadores[1],
                itnmax = 10000,
                disp = list(exp(logsdCt)))
b = Sys.time()
b-a


annual_biomass =
  CatDynBSD(res_06$fit,
            method = names(res_06$fit$Model),
            multi = T,
            mbw.sd = predicos$se.fit) %>% 
  mutate(TimeStep = 216,
         x =seq(2006,2023+11/12,1/12)) 

catch_cat = unlist(CatDynPred(x=res_06$fit,method="spg")$Model$Results['Predicted.Catch.thou'])


```



# RTMB


## Parameters to be estimated

-   $\alpha$ is the abundance response

-   $\beta$ is the effort response

Both allow non-linearity for $E_t$ and $N_t$;

-   $k$ is a scaling factor

-   $M$ is the natural mortality (with $m = e^{-\frac{M}{2}}$)

-   $N_0$ is the initial abundance of the stock at $t_0$

-  $R_j$ are the recruitment pulse magnitudes

## Model 3.1: GDM, as seen on CatDyn


```{r}
#| results: hide
#| warning: false

nmult = 1e3
dat = list()
dat$Ct = as.vector(cat_df$Data$`MIS+OTB-S`$obscat.thou)         # observed catch
dat$Et = as.vector(cat_df$Data$`MIS+OTB-S`$obseff.trips)       # effort
dat$u = unlist(indice_manual)                   # recruitment pulse months
nT = length(dat$Ct)
nR = length(dat$u)


I = matrix(0, nrow = nT, ncol = nR)
for (j in 1:nR) {
  I[(dat$u[j]-1):nT, j] <- 1 # -1 foi adicionado para ficar consistente com CatDyn.
}

dat$I = I

# Initial parameter values
par # already defined on catdyn chunk

# initialize joint negative loglikelihood function

jnll = function(par) {
  getAll(par, dat)

  # Extract parameters
  Ct     = OBS(Ct)
  Et     = OBS(Et)
  I  = OBS(I)
  alpha  = exp(logalpha)
  beta   = exp(logbeta)
  K      = exp(logK)
  N0     = exp(logN0_scaled)
  M      = exp(logM)
  sdCt   = exp(logsdCt)
  Rt     = exp(logRt_scaled)

  jnll = 0
  # Initialize predicted catch and biomass


  #comprimento = length(Ct)
nstep <- vector("numeric", nT) * alpha#init vector
mccum = vector("numeric", nT) * alpha
effeff1 = vector("numeric", nT) * alpha
effn1 = vector("numeric", nT) * alpha
predcat = vector("numeric", nT) * alpha


  mccum[1] = 0
  nstep[1] <- N0 * exp(-M)
  for(i in 2:nT){
    mccum[i] = Ct[i-1] + mccum[i-1] * exp(-M)
    nstep[i] = N0 * exp(-M*i) + 
      sum(I[i,] * Rt * exp(-M*(i-(dat$u-1)+1))) -
      mccum[i] * exp(-M/2)
    effeff1 <- Et^(alpha)
    effn1 <- nstep^(beta)
    predcat <- K * (effeff1 * effn1) * exp(-M/2)
  }
  
  # Negative log-likelihood
  jnll = -sum(dnorm(Ct, mean = predcat, sd = sdCt, log = TRUE))
  # if (is.null(Rt)) stop("Rt is NULL — check if Rt_scaled was passed correctly.")
    REPORT(predcat)
  jnll

}



# quick test: do we get a number? This number should be a likelihood.
jnll(par)

obj = MakeADFun(jnll, par)

# Set bounds

Rt_min = 0      # recruitment can't be negative
Rt_max = 1e8 

lower <- list(
  logRt_scaled = rep(Rt_min, 9),
  logalpha = -10, logbeta = -10, logK = -10,
  logN0_scaled = -10, logM = -10, logsdCt = -10
)

upper <- list(
  logRt_scaled = rep(Rt_max, 9),
  logalpha = 10, logbeta = 10, logK = 10,
  logN0_scaled = 10, logM = 10, logsdCt = 10
)

# Run optimizer
fit = nlminb(obj$par, obj$fn, obj$gr,
  lower = unlist(lower),
  upper = unlist(upper))

# Retrieve predicted catch
predicted_catch = obj$report()$predcat
sdr = sdreport(obj)
pl = as.list(sdr,"Est")
plsd = as.list(sdr,"Std")

ggplot() + 
  geom_line(aes(x = 1:length(dat$Ct),
                y = catch_cat)) + 
   geom_line(aes(x = 1:length(dat$Ct),
                y = predcat), col = 'red') +
     geom_line(aes(x = 1:length(dat$Ct),
                y = dat$Ct), linetype = 'dashed')
```

\todo[inline]{NaN warnings were also produced here}

```{r}
#| output: asis
#| echo: false
#| warning: false
summary(sdr7) %>% 
  as.data.frame() %>% 
  slice(-c(7:36)) %>%
  xtable %>% 
  print(comment = F,
        sanitize.text.function = function(x) 
          {gsub("_", "\\\\_", x)})
```

```{r}
# Calculate AIC
logLik_value7 = -fit7$objective
k = length(fit7$par)
aic_value7 = 2 * k - 2 * logLik_value7

# Calculate WAIC
log_lik7 = numeric(length(dat$Ct))

# Vector of predicted means
meanvec7 = numeric(1)
  m = exp(-exp(pl7$logM)/2)
  
  # catch[1] = K*Et[1]^alpha * m *(N0*exp(-M*1))^beta
  meanvec7[1] = exp(pl7$logK)*
    (dat$Et[1]^exp(pl7$logalpha)) *
    m *(1e9*exp(pl7$logN0_scaled)) *
    exp((-exp(pl7$logM)*1))^exp(pl7$logbeta)
  
  for(mes in 2:length(dat$Ct)){
       # core
    
    core = exp(pl7$logK)*(dat$Et[mes]^exp(pl7$logalpha)) * m 
    
    # M-driven decay
    
    part1 = (1e9 * exp(pl7$logN0_scaled)) * exp(-exp(pl7$logM)*mes)
    
    # catch aggregation
    
    ## Using the observation series 
    # part2 = 0
    # for(mes_ant in seq_len(length(dat$Ct)-1)){
    #   part2 = part2 + Ct[mes_ant]*exp(-M*(mes-mes_ant-1))}
    
    ## Using the expected catch recursively
    part2 = 0
      # if(mes != 1){
    for(mes_ant in seq_len(length(meanvec7))){
    part2 = part2 + meanvec7[mes_ant]*
      exp(-exp(pl7$logM)*(mes-mes_ant-1))
    }
    # }
    # Recruitment pulses
    
    part3 = 0
    for(j in seq_along(dat$u[dat$u<=mes])){
      part3 = part3 + pl7$Rt[j]*exp(-exp(pl7$logM)*(mes-dat$u[j]))}
    
    
    # Assemble
    base = part1 - m * part2 + part3
    pred = core * (base)^exp(pl7$logbeta)
    meanvec7[mes] = pred}
  # for(mes in seq_along(dat$Ct)){
  #   
  #   m = exp(-exp(pl7$logM)/2)
  #   
  #   # core
  #   
  #   core = exp(pl7$logK)*(dat$Et[mes]^exp(pl7$logalpha)) * m 
  #   
  #   # M-driven decay
  #   
  #   part1 = exp(pl7$logN0)*exp(-exp(pl7$logM)*mes)
  #   
  #   # catch aggregation
  #    
  #   part2 = 0
  #   for(mes_ant in seq_len(length(dat$Ct)-1)){
  #     part2 = part2 + dat$Ct[mes_ant]*exp(-exp(pl7$logM)*(mes-mes_ant-1))}
  #   
  #   # Recruitment pulses
  #   
  #   part3 = 0
  #   for(j in seq_along(dat$u[dat$u<=mes])){
  #     part3 = part3 + 
  #       summary(sdr7, 'random')[,'Estimate'][j]*
  #       exp(-exp(pl7$logM)*(mes-dat$u[j]))}
  #   
  #   
  #   # Assemble
  #   pred = core * (part1 -m*part2 + part3)^exp(pl7$logbeta)
  #   meanvec7[mes] = pred}
  
# Revert transformation of sigma(y)  
sdy = exp(pl7$logsdCt)

for(i in 1:length(dat$Ct)){
  log_lik7[i] = dnorm(dat$Ct[i], meanvec7[i], sdy, log=TRUE)
}

lppd7 = sum(log(mean(exp(log_lik7))))
p_waic7 = sum(var(log_lik7))
waic7 = -2 * (lppd7 - p_waic7)

```

```{r}
#| output: asis
#| echo: false

xtable(data.frame(Model = c('GMD'),
                  AIC = c(aic_value7), 
                  WAIC = c( waic7))) %>% 
  print(comment = F,
        sanitize.text.function = function(x)
          {gsub("_", "\\\\_", x)})
```



```{r}
# plot referencia catdyn
# 
results %>% 
  ggplot() + 
  geom_line(aes(x =Period.month, 
                y = Observed.Catch.kg),
            col = 'black') + 
    geom_line(aes(x =Period.month, 
                y = Predicted.Catch.kg),
            col = 'red', linetype =2) + 
  geom_line(aes(x =Period.month, 
                y = dat$Ct),
            col = 'green', linetype =2) + 
  theme_bw()
```


```{r}
ggplot() + 
  geom_line(aes(x = annual_biomass$x,
                y = annual_biomass$B.ton,
                group = 1),
            size = 1) +
  geom_ribbon(aes(x = annual_biomass$x,
                  y = annual_biomass$B.ton,
                  ymin= annual_biomass$B.ton- 2*annual_biomass$B.ton.SE,
                  ymax= annual_biomass$B.ton+ 2*annual_biomass$B.ton.SE),
              alpha=0.2) +

  # coord_cartesian(ylim = c(0, 300000), xlim = c(1995,2024)) +
  theme_bw()

results = res_06$pred$Model$Results %>% 
  as.data.frame() %>% 
  mutate(x = 1:216)

natural_mortality = res_06$fit$Model$spg$bt.par$M
natural_mortality_sd = res_06$fit$Model$spg$bt.stdev[['M']]

# Fishing Mortality
results %>% 
  ggplot() + 
  geom_line(aes(x = Period.month,
                y = `Observed.F.1/month`),
            col = 'tomato',
            size = 1) +
  geom_line(aes(x = Period.month,
                y = `Predicted.F.1/month`),
            col = 'darkred',
            size = 1,
            linetype = 2) + 
  geom_hline(yintercept = natural_mortality,
            col = 'darkgreen',
            size = 1,
            linetype = 1) +
  geom_hline(yintercept = natural_mortality + 2*natural_mortality,
             col = 'darkgreen',
             size = 1,
             linetype = 2) +
  geom_hline(yintercept = natural_mortality - 2*natural_mortality,
             col = 'darkgreen',
             size = 1,
             linetype = 2) +
  theme_bw()

# Exploitation Rate
# Exploitation Rate

results %>% 
  ggplot() + 
  geom_line(aes(x = Period.month,
                y = `Observed.Explotrate`),
            col = 'tomato',
            size = 1) +

  geom_line(aes(x = Period.month,
                y = `Predicted.Explotrate`),
            col = 'darkred',
            size = 1,
            linetype = 2) + 
  geom_hline(yintercept = 0.4) + 
  # geom_line(aes(x = Period.month,
  #               y = `Observed.F.1/month`/(`Observed.F.1/month`+ natural_mortality)),
  #           col = 'purple',
  #           size = 1) +
  # geom_hline(yintercept = 0.4,
  #            col = 'darkgreen',
  #            size = 1,
  #            linetype = 1) +
  theme_bw()


results %>% 
  summarise(pilas = `Observed.F.1/month`/(`Observed.F.1/month`+natural_mortality),
            expo = Observed.Explotrate) %>% 
  mutate(teste = pilas/expo)
```

```{r}
#| echo: false

set.seed(1)
pred7 = rnorm(216,
              meanvec7,
              sdy)

ggplot() + 
  geom_point(aes(x = 1:216,
                y = dat$Ct)) +
   geom_line(aes(x = 1:216,
                y = pred7),
            color = 'green') + 
  geom_line(aes(x = 1:216,
                y = obj7$report()['catch'] %>% unlist()),
            color = 'red') +
  theme_bw()
```

```{r estim_catdyn, eval = F}

cat_df = as.CatDynData(x=df_effort %>%
                         filter(as.numeric(
                           as.character(year_sale)) %in% c(2006:2023)),
                       step="month",
                       fleet.name="MIS+OTB-S",
                       coleff=6,
                       colcat=5,
                       colmbw=9,
                       unitseff="trips",
                       unitscat="kg",
                       unitsmbw="kg",
                       nmult="thou",
                       season.dates=c(as.Date("2006-01-01"),
                                      last_date_of_week(2023, 52)-1))

# plot.CatDynData(cat_df,
#                 mark = T,
#                 offset = c(0,1,10),
#                 hem = 'N')

indice_manual =
  list(
    10,11,12,
    12,12,10,11,12,
    11,10,12,7,10,
    12,11,12,12,10)

for(i in 0:(length(indice_manual)-1)){
  indice_manual[[i+1]] = 12*i + indice_manual[[i+1]]
}

# unlist(indice_manual)
#
cat_df$Data$`MIS+OTB-S` %>%
  mutate(year = ((time.step -1) %/% 12),
         x2 = rep(1:12,length(year)/12)) %>%
  ggplot() +
  geom_line(aes(color = factor(year)),
            linewidth = 1) +
  aes(y = spikecat,
      x = x2) +
  facet_wrap(year ~.) +
  scale_color_manual(values = colorRampPalette(wes_palette('Zissou1'))(
    length(cat_df$Data$`MIS+OTB-S`$time.step)/12)) +
  theme_bw() +
  theme(legend.position = 'none')
#
#
#first trial
a = Sys.time()
fit_null =
  trialer(cat_df,
           p = 18,
                M = 0.05976,
                N0.ini = 14020,
                P = indice_manual,
                P.ini  = list(
                5744,40315,3534,
                21558,2766,9735,
                55453,3438,16525,
                10746,14552,2524,
                22789,12567,34463,
                20000,20000,20000),
                k.ini = 0.00003546,
                alpha.ini = 1.1455,
                beta.ini  = 0.6134,
                distr = i,
                method = j,
                itnmax = 10000,
                disp = list(100))
b = Sys.time()
b-a
#
# # all fits
a = Sys.time()
distribuicoes = c("gamma", "lognormal","normal","negbin","aplnormal", "apnormal")
optimizadores = c('CG', 'spg', 'BFGS', 'Nelder-Mead')
gdm_log_06 = data_frame(distr = character(),
                        methods = character())
modelos_gdm_06 = list()
for(i in distribuicoes){
  for(j in optimizadores){
    tryCatch({
      modelos_gdm_06[[length(modelos_gdm_06)+1]] =
        trialer(cat_df,
                p = 18,
                M = 0.05976,
                N0.ini = 14020,
                P = indice_manual,
                P.ini  = list(
                5744,40315,3534,
                21558,2766,9735,
                55453,3438,16525,
                10746,14552,2524,
                22789,12567,34463,
                20000,20000,20000),
                k.ini = 0.00003546,
                alpha.ini = 1.1455,
                beta.ini  = 0.6134,
                distr = i,
                method = j,
                itnmax = 10000,
                disp = list(100))

      gdm_log_06[nrow(gdm_log_06)+1,1] = i
      gdm_log_06[nrow(gdm_log_06),2] = j
    },
    error=function(e){print(paste(i,j))
    })
  }
}
b = Sys.time()
b-a

resultados_06 = lapply(modelos_gdm_06, function(x){x$fit})


pred_06 = lapply(modelos_gdm_06, function(x){x$pred})
CatDynSum(x=resultados_06,
          season=2006,
          method=gdm_log_06$methods) %>% View


# plotador(cat_df, fit_null, pre = F,
#          post1 = T,
#          post2 = T)
save(fit_null,
     resultados_06,
     pred_06,
     gdm_log_06,
     file = 'data/preliminar_catdyn_fits.Rdata')

load('data/preliminar_catdyn_fits.Rdata')
# plotador(cat_df, fit_null, pre = F,
#          post1 = T,
#          post2 = T)


# exclude failures
tabela = 
CatDynSum(x=resultados_06,
          season=2006,
          method=gdm_log_06$methods) %>% 
  mutate(across(everything(),
                function(x){
    as.vector(unlist(x))}))

modelos_completos = 
tabela %>% 
  mutate(indice = 1:nrow(tabela)) %>% 
  filter(!if_any(everything(), is.nan)) %>% select(indice)

# 12
tabela[12,]

res_06 = list()
res_06$pred = pred_06[[modelos_completos$indice]]
res_06$fit = resultados_06[[modelos_completos$indice]]

annual_biomass =
  CatDynBSD(res_06$fit,
            method = names(res_06$fit$Model),
            multi = T,
            mbw.sd = predicos$se.fit) %>% 
  mutate(TimeStep = 216,
         x =seq(2006,2023+11/12,1/12)) 

catch_cat = unlist(CatDynPred(x=res_06$fit,method="spg")$Model$Results['Predicted.Catch.thou'])

```

\begin{abstract}

Polvo e o caralho (\cite{alemany_bayesian_2017})


\begin{keywords}
Bayesian, parametric, $p$-value, ICES
\end{keywords}
\end{abstract}



\section{Introduction\label{intro}}

This is sample text and needs to be completely replaced before submitting your paper.

\section{Methodology}

\subsection{CatDyn}

The fishery was assessed with *MAGD* in a previous work. In the current work, the same premises were adopted.

* Purse seine landings were discarded, for being too small
* Landings and effort from the polyvalent and bottom trawl fleets were included since no significant differences between their catch and effort relationship were observed. In this fashion, captures from near shore and coast fisheries were accounted for.
* Models were checked for gradient in parameter larger than 1


\section{References}

References within your paper should use the Harvard referencing format. This is sample text and needs to be completely replaced before submitting your paper. 

\subsection{Secondary Subhead}


This is sample text and needs to be completely replaced before submitting your paper.   

\section{Another Primary Subhead}

\subsection{Secondary Subhead}

This is sample text and needs to be completely replaced before submitting your paper. 

\subsubsection{Tertiary Subhead}

This is sample text and needs to be completely replaced before submitting your paper. 

\begin{table}
\caption{Genotypes and Their Genotypic Values for a Diallelic Locus Genotypes and Their Genotypic Values for a Diallelic Locus Genotypes and Their Genotypic Values for a Diallelic Locus Genotypes and Their Genotypic Values for a Diallelic Locus Genotypes and Their Genotypic Values for a Diallelic Locus }
\begin{center}
\begin{tabular}{ccccc}
\hline
\hline
\\[-5pt]
\multicolumn{2}{c}{Genotype} & &
\multicolumn{1}{c}{Dummy for additivity} &
\multicolumn{1}{c}{Dummy for dominance }\\
\multicolumn{1}{c}{Label} &    
\multicolumn{1}{c}{Index i} &
\multicolumn{1}{c}{Genotypic value ($\eta$)}&
\multicolumn{1}{c}{effect $\alpha$ (x)} &
\multicolumn{1}{c}{effect $\delta$ (z)}\\
\hline
qq      &1&     $\mu + \mbox{2}\alpha$  & 2&    0\\
Qq&     2&      $\mu + \alpha + \delta$&        1       &1\\
QQ&     3&      $\mu$&  0&      0\\
\hline
\end{tabular}
\end{center}
\end{table}

This is sample text and needs to be completely replaced before submitting your paper. 

\begin{figure}[t]
\centering\includegraphics[scale=.75]{fig1.eps}
\caption{Place figure caption here.}
\end{figure}

This is sample text and needs to be completely replaced before submitting your paper. 